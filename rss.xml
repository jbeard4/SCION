<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[SCION]]></title><description><![CDATA[Writing about the SCION open source software project]]></description><link>https://scion.io/</link><generator>RSS for Node</generator><lastBuildDate>Thu, 05 Jul 2018 15:14:56 GMT</lastBuildDate><item><title><![CDATA[SCION@4.3.1 Release Notes, Part 1]]></title><description><![CDATA[tl;dr The first and main feature that was added to SCION@4.3.1 is full compliance with the  SCXML IRP test suite  (passes all of the…]]></description><link>https://scion.io//blog/scion-4.3.1-release-notes-1/</link><guid isPermaLink="false">https://scion.io//blog/scion-4.3.1-release-notes-1/</guid><pubDate>Tue, 26 Jun 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;tl;dr The first and main feature that was added to SCION@4.3.1 is full compliance with the &lt;a href=&quot;https://www.w3.org/Voice/2013/scxml-irp/&quot;&gt;SCXML IRP test suite&lt;/a&gt; (passes all of the required, automated tests).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Notably, this includes support for SCXML’s &lt;code class=&quot;language-text&quot;&gt;&amp;lt;invoke&amp;gt;&lt;/code&gt; tag; provides a compliant implementation of the “Algorithm for SCXML Interpretation” described in &lt;a href=&quot;https://www.w3.org/TR/scxml/#AlgorithmforSCXMLInterpretation&quot;&gt;Appendix D&lt;/a&gt; of the specification; and fixes &lt;a href=&quot;https://github.com/jbeard4/SCION-CORE/issues/28&quot;&gt;several&lt;/a&gt; &lt;a href=&quot;https://github.com/jbeard4/SCION/issues/390&quot;&gt;open&lt;/a&gt; &lt;a href=&quot;https://github.com/jbeard4/SCION-CORE/issues/50&quot;&gt;issues&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are many different semantics for Statecharts family of languages (for a
good overview of various Statechart semantics, see &lt;a href=&quot;https://cs.uwaterloo.ca/~nday/pdf/techreps/2009-05-EsDa-tr.pdf&quot;&gt;“Big-Step Semantics”&lt;/a&gt; by
Shahram Esmaeilsabzali, Nancy A. Day, Joanne M. Atlee, and Jianwei Niu).
SCION now implements by default the semantics described in &lt;a href=&quot;https://www.w3.org/TR/scxml/&quot;&gt;Appendix D of the SCXML specification&lt;/a&gt;. This is a breaking change.&lt;/p&gt;
&lt;p&gt;Versions of SCION@3.3.1 implements a slightly different semantics,
described
&lt;a href=&quot;https://github.com/jbeard4/SCION/wiki/SCION-vs.-SCXML-Comparison&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;https://github.com/jbeard4/SCION/wiki/Scion-Semantics&quot;&gt;here&lt;/a&gt;, and
&lt;a href=&quot;http://digitool.library.mcgill.ca/R/-?func=dbin-jump-full&amp;#x26;object_id=116899&amp;#x26;silo_library=GEN01&quot;&gt;here&lt;/a&gt;.
The semantics of SCION@3.3.1 have been deprecated in SCION@4.3.1 in favor
of the semantics described in Appendix D of the SCXML specification. &lt;/p&gt;
&lt;p&gt;If you are upgrading an existing application, and you require support for
SCION@3.3.1 semantics, the
&lt;a href=&quot;https://github.com/jbeard4/scion-core-legac://github.com/jbeard4/scion-core-legacy&quot;&gt;scion-core-legacy&lt;/a&gt;
module provides a backwards-compatible, drop-in replacement module.&lt;/p&gt;
&lt;p&gt;Further documentation on the scion-core-legacy module will be forthcoming, but for now, you can find an example of its use &lt;a href=&quot;https://github.com/jbeard4/SCION/blob/v4.3.1/test/node-test-server.js#L14-L16&quot;&gt;here&lt;/a&gt;, in the node-test-server. &lt;/p&gt;
&lt;h2&gt;Testing backwards-compatibility&lt;/h2&gt;
&lt;p&gt;This section describes the approach used by SCION for testing backwards-compatibility.&lt;/p&gt;
&lt;p&gt;The SCION node.js test framework supports testing the backwards-compatibility mode. In terms of what is being tested, all the tests that were passing in SCION@3.3.1 also pass in SCION@4.3.1. In fact, SCION@4.3.1 includes &lt;em&gt;more&lt;/em&gt; tests for the legacy semantics than SCION@3.3.1 did:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; _ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;underscore&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; undefined
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; v431 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./4.3.1.json&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;//4.3.1 tests&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; undefined
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; v331 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./3.3.1.json&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;//3.3.1 tests&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v431&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v331&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/actionSend/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/assign-current-small-step/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/assign/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/atom3-basic-tests/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/basic/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/cond-js/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/data/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/default-initial-state/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/delayedSend/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/documentOrder/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/error/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/foreach/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/hierarchy+documentOrder/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/hierarchy/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/history/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/if-else/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/in/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/internal-transitions/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/more-parallel/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/multiple-events-per-transition/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/parallel+interrupt/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/parallel/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/script/*.scxml&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/send-idlocation/*.scxml&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v331&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v431&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;node_modules/scxml-test-framework/test/w3c-ecma/test201.txml.scxml&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;w3c-ecma/test201.txml.scxml&lt;/code&gt; is an optional test for the Basic HTTP Event I/O Processor defined in the specification, which SCION does not support. I believe it was listed in 3.3.1 erroneously, and I removed the test for it.&lt;/p&gt;
&lt;p&gt;For tests that are shared between Appendix D and the legacy semantics, two different test scripts are sometimes needed, because the semantics change the outcome of the test. For this, a special property &lt;code class=&quot;language-text&quot;&gt;legacySemantics&lt;/code&gt; has been added to the JSON test scripts in scxml-test-framework, which describes the test used for the legacy semantics. Currently, the following test scripts required changes because of different semantics regarding transition priority:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jbeard4/scxml-test-framework/blob/2.0.0/test/more-parallel/test10.json&quot;&gt;more-parallel/test10.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jbeard4/scxml-test-framework/blob/2.0.0/test/more-parallel/test10b.json&quot;&gt;more-parallel/test10b.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jbeard4/scxml-test-framework/blob/2.0.0/test/more-parallel/test2.json&quot;&gt;more-parallel/test2.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jbeard4/scxml-test-framework/blob/2.0.0/test/more-parallel/test3.json&quot;&gt;more-parallel/test3.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jbeard4/scxml-test-framework/blob/2.0.0/test/more-parallel/test6.json&quot;&gt;more-parallel/test6.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jbeard4/scxml-test-framework/blob/2.0.0/test/parallel+interrupt/test21.json&quot;&gt;parallel+interrupt/test21.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jbeard4/scxml-test-framework/blob/2.0.0/test/parallel+interrupt/test21b.json&quot;&gt;parallel+interrupt/test21b.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jbeard4/scxml-test-framework/blob/2.0.0/test/parallel+interrupt/test7.json&quot;&gt;parallel+interrupt/test7.json&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can run the tests for legacy semantics with the following invocation:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;grunt test --legacy-semantics&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Support for &lt;code class=&quot;language-text&quot;&gt;&amp;lt;invoke&amp;gt;&lt;/code&gt; in legacy semantics&lt;/h2&gt;
&lt;p&gt;Note that &lt;code class=&quot;language-text&quot;&gt;&amp;lt;invoke&amp;gt;&lt;/code&gt; is not currently supported in the legacy semantics. It does work, but it will invoke a new session with the Appendix D semantics. I could add an API to configure SCION to start new invoked sessions with legacy semantics, if people report this as a desirable feature.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The Next Step in the Evolution of SCION, a.k.a. Scion-ng, a.k.a. SCION-core, a.k.a. SCION 1.0.0]]></title><description><![CDATA[tl;dr: The next version of SCION is going to have real stack traces for SCXML, and an API by which js devs can specify the Statecharts model…]]></description><link>https://scion.io//blog/the-next-step-in-the-evolution-of-scion/</link><guid isPermaLink="false">https://scion.io//blog/the-next-step-in-the-evolution-of-scion/</guid><pubDate>Fri, 22 Feb 2013 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;tl;dr: The next version of SCION is going to have real stack traces for SCXML, and an API by which js devs can specify the Statecharts model as a simple, declarative JavaScript object.&lt;/em&gt;&lt;/p&gt;
&lt;span class=&quot;more&quot;&gt;
&lt;p&gt;I have started this blog for SCION news and updates because I wanted to provide a fuller picture of the major architectural changes that are occurring in SCION, and the motivation for making these changes. I’ll refer to this next major iteration of SCION as “SCION-ng” (for “next generation”), although the branch name on GitHub is “core”, and the semantic versioning number has been rev’d to 1.0.0, so it could be referred to by any of these attributes.&lt;/p&gt;
&lt;h1&gt;Deficiences in SCION&lt;/h1&gt;
&lt;p&gt;So far, I think the SCION project has been successful in reaching its initial goals of developing a fast, robust, portable, embeddable SCXML interpreter. SCION is being used in production and provides an effective solution for many developers working with SCXML.&lt;/p&gt;
&lt;p&gt;However, in my mind SCION has had two major deficiencies. The first is that SCION lacks traceability, which is to say, if an exception is thrown during execution of an SCXML document originating from some JavaScript action code within that document, SCION will not provide a meaningful stack trace with line and column numbers tracing back to the original source SCXML document. Instead, it provides the line and column number of the JavaScript code generated by SCION, which is something that is private and internal to SCION and not meant to be user-visible, essentially making the resulting stack trace a useless garbage value. The reason for this problem is that SCION relies on the XML DOM API for document parsing, and DOM does not report the original line and column numbers of the parsed elements. So, the first goal of SCION-ng is to fix this problem and bring real stack traces to SCION.&lt;/p&gt;
&lt;p&gt;The second major deficiency in SCION is its reliance on SCXML, and subsequently, an XML syntax for specifying Statecharts models. One of the original goals of SCION was that it would be useful to Web front-end developers for managing complex UI state (this subject is actually the second half of my soon-to-be-published Master thesis). However, based on my conversations with many front-end developers, I found that relying on an XML syntax was virtually a non-starter. Note that I work as a Web front-end developer professionally, and I happen to enjoy working with various forms of executable XML (just look at my Google Summer of Code 2010 project, scxml-js, to see how much I like XSLT!), but I recognize that I am very much in the minority here. Front-end developers would prefer to work with either a pure-JSON syntax, or, alternatively, a simple JavaScript object. So, to make SCION more useful and accessible to Web front-end developers, the second goal of SCION-ng is to allow developers to specify the Statecharts model as a simple, declarative JavaScript object literal; entry, exit, and transition actions will simply be JavaScript functions, or arrays of JavaScript functions attached to onEntry/onExit/onTransition properties of the object; and the SCXML datamodel will simply be local variables kept in a closure using the JavaScript module pattern. These data structures and these concepts are a front-end developer’s bread and butter, and it makes perfect sense to create a lean Statecharts interpreter that maximally reuses these concepts.&lt;/p&gt;
&lt;h1&gt;Solution and Benefits&lt;/h1&gt;
&lt;p&gt;In order to accomplish these goals, then, I have rearchitected SCION into two separate modules: SCION-core and scxml.js. SCION-core will be the core state machine engine, which accepts a simple JavaScript object as the Statecharts model and then interprets it according to SCION semantics. scxml.js, on the other hand, will be a lightweight compiler which accepts an SCXML document as input, then parses it using the excellent sax-js XML parser, preserving line and column numbers in the process, and generates nicely formatted JavaScript modules as output, with line and column numbers embedded in the generated function name, so that if an exception occurs during execution, it will give you a meaningful stack trace. The generated modules return a Statecharts model object which can be fed into SCION-core. scxml.js will depend on SCION-core, but not vice-versa.&lt;/p&gt;
&lt;p&gt;scxml.js will be able to perform this SCXML-to-JavaScript compilation either ahead-of-time, or on the fly at runtime in a way that is transparent to the developer. In fact, scxml.js will be mostly backwards-compatible with the current version of SCION. I say “mostly”, because I’m planning to change or remove some features which were originally useful for research purposes, but were never used much and are now a source of additional complexity. I’ll write in more detail about these features in a future post. The SCION API should remain unchanged.&lt;/p&gt;
&lt;p&gt;There will be additional benefits to this refactoring effort as well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It will be possible to entirely eliminate SCION’s somewhat brittle DOM compatibility layer, which should mean greater reliability across environments.&lt;/li&gt;
&lt;li&gt;Stripping SCION-core down to just the state machine interpreter made it feasible to combine everything into one UMD module (it’s under 1000 LOC, including comments, which I think is quite reasonable for a single module). This means it will be trivial to install and use SCION from CommonJS, AMD, or Vanilla JS - no build step or compatibility shims required! It also means that Google Closure compiler can optimize things really well, leading to the next point…&lt;/li&gt;
&lt;li&gt;SCION-core is super-small - only 2.3kb after being minified and gzipped! This will give Web developers a lot of expressive power in a very tiny package.&lt;/li&gt;
&lt;li&gt;Finally, being able to specify a Statecharts model using a simple JavaScript object has a lot of exciting prospects regarding dynamic generation of Statecharts models at runtime. I think this is a capability with many potential applications, and this is something I’ll write more about in a future post.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Examples&lt;/h1&gt;
&lt;p&gt;So, that’s a lot of talk about architecture, let’s look at some code. All of these examples have been auto-generated by scxml.js from the scxml-test-framework, so they are not the most user-friendly, but should give you a sense of how to specify Statecharts models for SCION-core, and the compiled code output of scxml.js.&lt;/p&gt;
&lt;p&gt;Here’s an example based on test basic/basic1.scxml:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;states&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token string&quot;&gt;&quot;transitions&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token string&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;token string&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;t&quot;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;b&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;As you can see, it’s just a simple JSON file. This can be passed directly into the SCION constructor like so:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./basic1.sc.json&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; sc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;scion&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Statechart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
sc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;There is a limited subset of SCXML that can be described by as pure JSON and executed by SCION. If there is a datamodel or action code, then a pure-json representation is not sufficient, and so a regular JavaScript module is used instead. The naming conventions for JSON and JavaScript files containing Statechart models is *.sc.json and *.sc.js.&lt;/p&gt;
&lt;p&gt;Here’s an example compiled from test &lt;a href=&quot;https://github.com/jbeard4/scxml-test-framework/blob/master/test/script/test0.scxml&quot;&gt;script/test0.scxml&lt;/a&gt; that shows how to execute actions and manipulate data:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//Generated on Thursday, February 21, 2013 19:56:28 by the SCION SCXML compiler&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$script_line_27_column_20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_event&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; In&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _sessionId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _ioprocessors&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$cond_line_34_column_59&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_event&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; In&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _sessionId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _ioprocessors&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;states&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;intitial1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token string&quot;&gt;&quot;transitions&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token string&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;token string&quot;&gt;&quot;onTransition&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $script_line_27_column_20
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token string&quot;&gt;&quot;transitions&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token string&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;token string&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;t&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;token string&quot;&gt;&quot;cond&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $cond_line_34_column_59
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token string&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;f&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;token string&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;t&quot;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;b&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;f&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;You could use this model as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./test0.sc&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; sc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;scion&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Statechart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
sc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;More examples can be found in the tests directory of the “core” branch of SCION.&lt;/p&gt;
&lt;h1&gt;Implementation Status&lt;/h1&gt;
&lt;p&gt;Documentation still needs to be written for SCION-core, but it passes all the tests from the scxml-test-framework, and so I feel it is ready to be used. It exists as a single UMD module here, in the “core” branch of SCION.&lt;/p&gt;
&lt;p&gt;scxml.js still needs some more work: it currently only supports ahead-of-time compilation using node.js, so I need to make it portable and support on-the-fly compilation. The code lives here.&lt;/p&gt;
&lt;p&gt;I’m planning to continue working in the “core” branch of SCION until scxml.js is fully compatible with the current SCION API. When that’s done, I’ll publish a final release of the SCION 0.0.* branch. I’ll then merge the SCION “core” branch back into “master”, and publish a 1.0.0 release of SCION-ng.&lt;/p&gt;
&lt;p&gt;I welcome your questions and comments.&lt;/p&gt;</content:encoded></item></channel></rss>